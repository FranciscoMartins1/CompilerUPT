
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BREAK COLON COMMA DIF DIV ELSE EQUALS EXPO FALSE FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LBRACE LESS LESS_EQUAL MINUS MOD NOT NUMBER OR PAR_CLOSE PAR_OPEN PLUS PRINT PROGRAM RBRACE READ RETURN SEMICOLON TIMES TO TRUE VAR VOID WHILEProgram : ProgramHeader ProgramBodyProgramHeader : PROGRAM ID SEMICOLONProgramBody : FuncDecls VarDecls CmdFuncDecls : empty\n                | Function FuncDeclsFunction : FunctionHeader FunctionBodyFunctionHeader : FunctionType FUNCTION ID PAR_OPEN ParamList PAR_CLOSE COLONFunctionType : INT\n                    | BOOL\n                    | VOIDFunctionBody : LBRACE VarDecls CmdList RBRACEParamList : empty\n                | ParamList1ParamList1 : Param COMMA ParamList1\n                    | Param Param : ID COLON Typeempty :VarDecls : empty\n                | VarDecl VarDecls VarDecl : VAR ID COLON Type SEMICOLONType : INT\n            | BOOLExpr : NUMBER\n            | TRUE\n            | FALSE\n            | ID\n            | Expr BinOp Expr\n            | UnOp Expr\n            | PAR_OPEN Expr PAR_CLOSE\n            | ID PAR_OPEN ExprList PAR_CLOSE\n            | READ PAR_OPEN PAR_CLOSEBinOp : PLUS\n            | MINUS\n            | TIMES\n            | EXPO \n            | MOD\n            | DIF\n            | EQUALS\n            | LESS\n            | GREATER\n            | LESS_EQUAL\n            | GREATER_EQUAL\n            | AND\n            | ORUnOp : MINUS\n            | NOTExprList : empty\n                | ExprList1ExprList1 : Expr\n                | Expr COMMA ExprList1Cmd : CmdAtrib\n            | CmdIf\n            | CmdWhile\n            | CmdFor\n            | CmdBreak\n            | CmdPrint\n            | CmdReturn\n            | CmdSeqCmdAtrib : ID\n                | Expr\n                | ID ASSIGN ExprCmdIf : IF Expr COLON Cmd \n            | IF Expr COLON Cmd ELSE COLONCmdWhile : WHILE Expr COLON CmdCmdFor : FOR CmdAtrib TO Expr COLON CmdCmdBreak : BREAKCmdPrint : PRINT PAR_OPEN ExprList PAR_CLOSE CmdReturn : RETURN ExprCmdSeq : LBRACE CmdList RBRACECmdList : Cmd SEMICOLON CmdList\n                | Cmd'
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,4,23,24,25,26,27,28,29,30,31,32,33,37,42,43,44,70,75,78,83,88,93,94,96,106,108,109,111,123,124,],[0,-1,-3,-51,-52,-53,-54,-55,-56,-57,-58,-26,-60,-66,-23,-24,-25,-26,-68,-28,-61,-27,-29,-69,-31,-30,-62,-64,-67,-63,-65,]),'VAR':([2,5,6,7,16,18,19,20,22,100,113,],[-17,17,-4,-17,17,-5,-6,17,-2,-11,-20,]),'ID':([2,3,5,6,7,14,15,16,17,18,19,20,21,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,82,89,90,91,95,100,107,113,116,119,],[-17,13,-17,-4,-17,32,-18,-17,50,-5,-6,-17,52,-2,70,70,32,70,70,32,70,-45,-46,-19,32,70,70,70,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,70,101,32,32,70,32,-11,70,-20,101,32,]),'IF':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-17,-17,-4,-17,34,-18,-17,-5,-6,-17,-2,34,-19,34,34,34,34,-11,-20,34,]),'WHILE':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-17,-17,-4,-17,35,-18,-17,-5,-6,-17,-2,35,-19,35,35,35,35,-11,-20,35,]),'FOR':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-17,-17,-4,-17,36,-18,-17,-5,-6,-17,-2,36,-19,36,36,36,36,-11,-20,36,]),'BREAK':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-17,-17,-4,-17,37,-18,-17,-5,-6,-17,-2,37,-19,37,37,37,37,-11,-20,37,]),'PRINT':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-17,-17,-4,-17,38,-18,-17,-5,-6,-17,-2,38,-19,38,38,38,38,-11,-20,38,]),'RETURN':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-17,-17,-4,-17,40,-18,-17,-5,-6,-17,-2,40,-19,40,40,40,40,-11,-20,40,]),'LBRACE':([2,5,6,7,8,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,121,],[-17,-17,-4,-17,20,41,-18,-17,-5,-6,-17,-2,41,-19,41,41,41,41,-11,-20,41,-7,]),'NUMBER':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,89,90,91,95,100,107,113,119,],[-17,-17,-4,-17,42,-18,-17,-5,-6,-17,-2,42,42,42,42,42,42,42,-45,-46,-19,42,42,42,42,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,42,42,42,42,42,-11,42,-20,42,]),'TRUE':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,89,90,91,95,100,107,113,119,],[-17,-17,-4,-17,43,-18,-17,-5,-6,-17,-2,43,43,43,43,43,43,43,-45,-46,-19,43,43,43,43,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,43,43,43,43,43,-11,43,-20,43,]),'FALSE':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,89,90,91,95,100,107,113,119,],[-17,-17,-4,-17,44,-18,-17,-5,-6,-17,-2,44,44,44,44,44,44,44,-45,-46,-19,44,44,44,44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,44,44,44,44,44,-11,44,-20,44,]),'PAR_OPEN':([2,5,6,7,14,15,16,18,19,20,22,32,34,35,36,38,39,40,41,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,73,89,90,91,95,100,107,113,119,],[-17,-17,-4,-17,39,-18,-17,-5,-6,-17,-2,54,39,39,39,73,39,39,39,39,79,-45,-46,-19,39,82,39,39,39,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,54,39,39,39,39,39,-11,39,-20,39,]),'READ':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,89,90,91,95,100,107,113,119,],[-17,-17,-4,-17,46,-18,-17,-5,-6,-17,-2,46,46,46,46,46,46,46,-45,-46,-19,46,46,46,46,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,46,46,46,46,46,-11,46,-20,46,]),'MINUS':([2,5,6,7,14,15,16,18,19,20,22,32,33,34,35,36,39,40,41,42,43,44,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,78,83,87,88,89,90,91,93,95,96,100,106,107,110,113,119,],[-17,-17,-4,-17,47,-18,-17,-5,-6,-17,-2,-26,57,47,47,47,47,47,47,-23,-24,-25,47,-45,-46,-19,47,47,47,47,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,57,-26,57,47,57,57,57,57,57,57,47,47,47,-29,47,-31,-11,-30,47,57,-20,47,]),'NOT':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,89,90,91,95,100,107,113,119,],[-17,-17,-4,-17,48,-18,-17,-5,-6,-17,-2,48,48,48,48,48,48,48,-45,-46,-19,48,48,48,48,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,48,48,48,48,48,-11,48,-20,48,]),'INT':([2,7,19,22,80,100,114,],[10,10,-6,-2,98,-11,98,]),'BOOL':([2,7,19,22,80,100,114,],[11,11,-6,-2,99,-11,99,]),'VOID':([2,7,19,22,100,],[12,12,-6,-2,-11,]),'FUNCTION':([9,10,11,12,],[21,-8,-9,-10,]),'SEMICOLON':([13,24,25,26,27,28,29,30,31,32,33,37,42,43,44,70,75,77,78,83,88,93,94,96,97,98,99,106,108,109,111,123,124,],[22,-51,-52,-53,-54,-55,-56,-57,-58,-26,-60,-66,-23,-24,-25,-26,-68,95,-28,-61,-27,-29,-69,-31,113,-21,-22,-30,-62,-64,-67,-63,-65,]),'RBRACE':([24,25,26,27,28,29,30,31,32,33,37,42,43,44,70,75,76,77,78,81,83,88,93,94,96,106,108,109,111,112,123,124,],[-51,-52,-53,-54,-55,-56,-57,-58,-26,-60,-66,-23,-24,-25,-26,-68,94,-71,-28,100,-61,-27,-29,-69,-31,-30,-62,-64,-67,-70,-63,-65,]),'ELSE':([24,25,26,27,28,29,30,31,32,33,37,42,43,44,70,75,78,83,88,93,94,96,106,108,109,111,123,124,],[-51,-52,-53,-54,-55,-56,-57,-58,-26,-60,-66,-23,-24,-25,-26,-68,-28,-61,-27,-29,-69,-31,-30,118,-64,-67,-63,-65,]),'TO':([32,33,42,43,44,70,72,78,83,88,93,96,106,],[-26,-60,-23,-24,-25,-26,91,-28,-61,-27,-29,-31,-30,]),'ASSIGN':([32,],[53,]),'PLUS':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,56,-23,-24,-25,56,-26,56,56,56,56,56,56,56,-29,-31,-30,56,]),'TIMES':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,58,-23,-24,-25,58,-26,58,58,58,58,58,58,58,-29,-31,-30,58,]),'EXPO':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,59,-23,-24,-25,59,-26,59,59,59,59,59,59,59,-29,-31,-30,59,]),'MOD':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,60,-23,-24,-25,60,-26,60,60,60,60,60,60,60,-29,-31,-30,60,]),'DIF':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,61,-23,-24,-25,61,-26,61,61,61,61,61,61,61,-29,-31,-30,61,]),'EQUALS':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,62,-23,-24,-25,62,-26,62,62,62,62,62,62,62,-29,-31,-30,62,]),'LESS':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,63,-23,-24,-25,63,-26,63,63,63,63,63,63,63,-29,-31,-30,63,]),'GREATER':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,64,-23,-24,-25,64,-26,64,64,64,64,64,64,64,-29,-31,-30,64,]),'LESS_EQUAL':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,65,-23,-24,-25,65,-26,65,65,65,65,65,65,65,-29,-31,-30,65,]),'GREATER_EQUAL':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,66,-23,-24,-25,66,-26,66,66,66,66,66,66,66,-29,-31,-30,66,]),'AND':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,67,-23,-24,-25,67,-26,67,67,67,67,67,67,67,-29,-31,-30,67,]),'OR':([32,33,42,43,44,69,70,71,74,75,78,83,87,88,93,96,106,110,],[-26,68,-23,-24,-25,68,-26,68,68,68,68,68,68,68,-29,-31,-30,68,]),'COLON':([42,43,44,50,69,70,71,78,88,93,96,101,106,110,115,118,],[-23,-24,-25,80,89,-26,90,-28,-27,-29,-31,114,-30,119,121,123,]),'PAR_CLOSE':([42,43,44,54,70,73,74,78,79,82,84,85,86,87,88,92,93,96,98,99,102,103,104,105,106,117,120,122,],[-23,-24,-25,-17,-26,-17,93,-28,96,-17,106,-47,-48,-49,-27,111,-29,-31,-21,-22,115,-12,-13,-15,-30,-50,-16,-14,]),'COMMA':([42,43,44,70,78,87,88,93,96,98,99,105,106,120,],[-23,-24,-25,-26,-28,107,-27,-29,-31,-21,-22,116,-30,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'ProgramHeader':([0,],[2,]),'ProgramBody':([2,],[4,]),'FuncDecls':([2,7,],[5,18,]),'empty':([2,5,7,16,20,54,73,82,],[6,15,6,15,15,85,85,103,]),'Function':([2,7,],[7,7,]),'FunctionHeader':([2,7,],[8,8,]),'FunctionType':([2,7,],[9,9,]),'VarDecls':([5,16,20,],[14,49,51,]),'VarDecl':([5,16,20,],[16,16,16,]),'FunctionBody':([8,],[19,]),'Cmd':([14,41,51,89,90,95,119,],[23,77,77,108,109,77,124,]),'CmdAtrib':([14,36,41,51,89,90,95,119,],[24,72,24,24,24,24,24,24,]),'CmdIf':([14,41,51,89,90,95,119,],[25,25,25,25,25,25,25,]),'CmdWhile':([14,41,51,89,90,95,119,],[26,26,26,26,26,26,26,]),'CmdFor':([14,41,51,89,90,95,119,],[27,27,27,27,27,27,27,]),'CmdBreak':([14,41,51,89,90,95,119,],[28,28,28,28,28,28,28,]),'CmdPrint':([14,41,51,89,90,95,119,],[29,29,29,29,29,29,29,]),'CmdReturn':([14,41,51,89,90,95,119,],[30,30,30,30,30,30,30,]),'CmdSeq':([14,41,51,89,90,95,119,],[31,31,31,31,31,31,31,]),'Expr':([14,34,35,36,39,40,41,45,51,53,54,55,73,89,90,91,95,107,119,],[33,69,71,33,74,75,33,78,33,83,87,88,87,33,33,110,33,87,33,]),'UnOp':([14,34,35,36,39,40,41,45,51,53,54,55,73,89,90,91,95,107,119,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'BinOp':([33,69,71,74,75,78,83,87,88,110,],[55,55,55,55,55,55,55,55,55,55,]),'CmdList':([41,51,95,],[76,81,112,]),'ExprList':([54,73,],[84,92,]),'ExprList1':([54,73,107,],[86,86,117,]),'Type':([80,114,],[97,120,]),'ParamList':([82,],[102,]),'ParamList1':([82,116,],[104,122,]),'Param':([82,116,],[105,105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> ProgramHeader ProgramBody','Program',2,'p_Program','parser.py',124),
  ('ProgramHeader -> PROGRAM ID SEMICOLON','ProgramHeader',3,'p_ProgramHeader','parser.py',128),
  ('ProgramBody -> FuncDecls VarDecls Cmd','ProgramBody',3,'p_ProgramBody','parser.py',132),
  ('FuncDecls -> empty','FuncDecls',1,'p_FuncDecls','parser.py',136),
  ('FuncDecls -> Function FuncDecls','FuncDecls',2,'p_FuncDecls','parser.py',137),
  ('Function -> FunctionHeader FunctionBody','Function',2,'p_Function','parser.py',151),
  ('FunctionHeader -> FunctionType FUNCTION ID PAR_OPEN ParamList PAR_CLOSE COLON','FunctionHeader',7,'p_FunctionHeader','parser.py',155),
  ('FunctionType -> INT','FunctionType',1,'p_FunctionType','parser.py',159),
  ('FunctionType -> BOOL','FunctionType',1,'p_FunctionType','parser.py',160),
  ('FunctionType -> VOID','FunctionType',1,'p_FunctionType','parser.py',161),
  ('FunctionBody -> LBRACE VarDecls CmdList RBRACE','FunctionBody',4,'p_FunctionBody','parser.py',165),
  ('ParamList -> empty','ParamList',1,'p_ParamList','parser.py',169),
  ('ParamList -> ParamList1','ParamList',1,'p_ParamList','parser.py',170),
  ('ParamList1 -> Param COMMA ParamList1','ParamList1',3,'p_ParamList1','parser.py',175),
  ('ParamList1 -> Param','ParamList1',1,'p_ParamList1','parser.py',176),
  ('Param -> ID COLON Type','Param',3,'p_Param','parser.py',186),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',192),
  ('VarDecls -> empty','VarDecls',1,'p_VarDecls','parser.py',196),
  ('VarDecls -> VarDecl VarDecls','VarDecls',2,'p_VarDecls','parser.py',197),
  ('VarDecl -> VAR ID COLON Type SEMICOLON','VarDecl',5,'p_VarDecl','parser.py',207),
  ('Type -> INT','Type',1,'p_Type','parser.py',212),
  ('Type -> BOOL','Type',1,'p_Type','parser.py',213),
  ('Expr -> NUMBER','Expr',1,'p_Expr','parser.py',217),
  ('Expr -> TRUE','Expr',1,'p_Expr','parser.py',218),
  ('Expr -> FALSE','Expr',1,'p_Expr','parser.py',219),
  ('Expr -> ID','Expr',1,'p_Expr','parser.py',220),
  ('Expr -> Expr BinOp Expr','Expr',3,'p_Expr','parser.py',221),
  ('Expr -> UnOp Expr','Expr',2,'p_Expr','parser.py',222),
  ('Expr -> PAR_OPEN Expr PAR_CLOSE','Expr',3,'p_Expr','parser.py',223),
  ('Expr -> ID PAR_OPEN ExprList PAR_CLOSE','Expr',4,'p_Expr','parser.py',224),
  ('Expr -> READ PAR_OPEN PAR_CLOSE','Expr',3,'p_Expr','parser.py',225),
  ('BinOp -> PLUS','BinOp',1,'p_BinOp','parser.py',245),
  ('BinOp -> MINUS','BinOp',1,'p_BinOp','parser.py',246),
  ('BinOp -> TIMES','BinOp',1,'p_BinOp','parser.py',247),
  ('BinOp -> EXPO','BinOp',1,'p_BinOp','parser.py',248),
  ('BinOp -> MOD','BinOp',1,'p_BinOp','parser.py',249),
  ('BinOp -> DIF','BinOp',1,'p_BinOp','parser.py',250),
  ('BinOp -> EQUALS','BinOp',1,'p_BinOp','parser.py',251),
  ('BinOp -> LESS','BinOp',1,'p_BinOp','parser.py',252),
  ('BinOp -> GREATER','BinOp',1,'p_BinOp','parser.py',253),
  ('BinOp -> LESS_EQUAL','BinOp',1,'p_BinOp','parser.py',254),
  ('BinOp -> GREATER_EQUAL','BinOp',1,'p_BinOp','parser.py',255),
  ('BinOp -> AND','BinOp',1,'p_BinOp','parser.py',256),
  ('BinOp -> OR','BinOp',1,'p_BinOp','parser.py',257),
  ('UnOp -> MINUS','UnOp',1,'p_UnOp','parser.py',261),
  ('UnOp -> NOT','UnOp',1,'p_UnOp','parser.py',262),
  ('ExprList -> empty','ExprList',1,'p_ExprList','parser.py',266),
  ('ExprList -> ExprList1','ExprList',1,'p_ExprList','parser.py',267),
  ('ExprList1 -> Expr','ExprList1',1,'p_ExprList1','parser.py',272),
  ('ExprList1 -> Expr COMMA ExprList1','ExprList1',3,'p_ExprList1','parser.py',273),
  ('Cmd -> CmdAtrib','Cmd',1,'p_Cmd','parser.py',283),
  ('Cmd -> CmdIf','Cmd',1,'p_Cmd','parser.py',284),
  ('Cmd -> CmdWhile','Cmd',1,'p_Cmd','parser.py',285),
  ('Cmd -> CmdFor','Cmd',1,'p_Cmd','parser.py',286),
  ('Cmd -> CmdBreak','Cmd',1,'p_Cmd','parser.py',287),
  ('Cmd -> CmdPrint','Cmd',1,'p_Cmd','parser.py',288),
  ('Cmd -> CmdReturn','Cmd',1,'p_Cmd','parser.py',289),
  ('Cmd -> CmdSeq','Cmd',1,'p_Cmd','parser.py',290),
  ('CmdAtrib -> ID','CmdAtrib',1,'p_CmdAtrib','parser.py',295),
  ('CmdAtrib -> Expr','CmdAtrib',1,'p_CmdAtrib','parser.py',296),
  ('CmdAtrib -> ID ASSIGN Expr','CmdAtrib',3,'p_CmdAtrib','parser.py',297),
  ('CmdIf -> IF Expr COLON Cmd','CmdIf',4,'p_CmdIf','parser.py',306),
  ('CmdIf -> IF Expr COLON Cmd ELSE COLON','CmdIf',6,'p_CmdIf','parser.py',307),
  ('CmdWhile -> WHILE Expr COLON Cmd','CmdWhile',4,'p_CmdWhile','parser.py',312),
  ('CmdFor -> FOR CmdAtrib TO Expr COLON Cmd','CmdFor',6,'p_CmdFor','parser.py',316),
  ('CmdBreak -> BREAK','CmdBreak',1,'p_CmdBreak','parser.py',320),
  ('CmdPrint -> PRINT PAR_OPEN ExprList PAR_CLOSE','CmdPrint',4,'p_CmdPrint','parser.py',324),
  ('CmdReturn -> RETURN Expr','CmdReturn',2,'p_CmdReturn','parser.py',328),
  ('CmdSeq -> LBRACE CmdList RBRACE','CmdSeq',3,'p_CmdSeq','parser.py',332),
  ('CmdList -> Cmd SEMICOLON CmdList','CmdList',3,'p_CmdList','parser.py',336),
  ('CmdList -> Cmd','CmdList',1,'p_CmdList','parser.py',337),
]
